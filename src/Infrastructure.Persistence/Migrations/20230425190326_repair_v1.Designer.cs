// <auto-generated />
using System;
using Infrastructure.Persistence.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    [Migration("20230425190326_repair_v1")]
    partial class repair_v1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Entities.Copy", b =>
                {
                    b.Property<string>("InventoryNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HistoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("ItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastRentalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastReservationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LibraryId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("InventoryNumber");

                    b.HasIndex("HistoryId");

                    b.HasIndex("ItemId");

                    b.HasIndex("LastRentalId")
                        .IsUnique()
                        .HasFilter("[LastRentalId] IS NOT NULL");

                    b.HasIndex("LastReservationId")
                        .IsUnique()
                        .HasFilter("[LastReservationId] IS NOT NULL");

                    b.HasIndex("LibraryId");

                    b.ToTable("Copies");
                });

            modelBuilder.Entity("Domain.Entities.History", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("Domain.Entities.Item", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Authors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FormOfPublication")
                        .HasColumnType("int");

                    b.Property<string>("ISBN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Publisher")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("YearOfPublication")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Domain.Entities.Library", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPhotocopier")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrinter")
                        .HasColumnType("bit");

                    b.Property<bool>("IsScanner")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfComputerStations")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Libraries");
                });

            modelBuilder.Entity("Domain.Entities.Profile", b =>
                {
                    b.Property<string>("LibraryCardNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HistoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LibraryCardNumber");

                    b.HasIndex("HistoryId");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("Domain.Entities.Rental", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BeginTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("HistoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsReturned")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PenaltyCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProfileLibraryCardNumber")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.HasIndex("ProfileLibraryCardNumber");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("Domain.Entities.Reservation", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BeginTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("HistoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileLibraryCardNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Received")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.HasIndex("ProfileLibraryCardNumber");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Domain.Entities.Copy", b =>
                {
                    b.HasOne("Domain.Entities.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.HasOne("Domain.Entities.Item", "Item")
                        .WithMany("Copies")
                        .HasForeignKey("ItemId");

                    b.HasOne("Domain.Entities.Rental", "LastRental")
                        .WithOne("Copy")
                        .HasForeignKey("Domain.Entities.Copy", "LastRentalId");

                    b.HasOne("Domain.Entities.Reservation", "LastReservation")
                        .WithOne("Copy")
                        .HasForeignKey("Domain.Entities.Copy", "LastReservationId");

                    b.HasOne("Domain.Entities.Library", "Library")
                        .WithMany()
                        .HasForeignKey("LibraryId");

                    b.Navigation("History");

                    b.Navigation("Item");

                    b.Navigation("LastRental");

                    b.Navigation("LastReservation");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("Domain.Entities.Profile", b =>
                {
                    b.HasOne("Domain.Entities.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("History");
                });

            modelBuilder.Entity("Domain.Entities.Rental", b =>
                {
                    b.HasOne("Domain.Entities.History", "History")
                        .WithMany("HistoryRentals")
                        .HasForeignKey("HistoryId");

                    b.HasOne("Domain.Entities.Profile", "Profile")
                        .WithMany("CurrentRentals")
                        .HasForeignKey("ProfileLibraryCardNumber");

                    b.Navigation("History");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Domain.Entities.Reservation", b =>
                {
                    b.HasOne("Domain.Entities.History", "History")
                        .WithMany("HistoryReservations")
                        .HasForeignKey("HistoryId");

                    b.HasOne("Domain.Entities.Profile", "Profile")
                        .WithMany("CurrrentReservations")
                        .HasForeignKey("ProfileLibraryCardNumber");

                    b.Navigation("History");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Domain.Entities.History", b =>
                {
                    b.Navigation("HistoryRentals");

                    b.Navigation("HistoryReservations");
                });

            modelBuilder.Entity("Domain.Entities.Item", b =>
                {
                    b.Navigation("Copies");
                });

            modelBuilder.Entity("Domain.Entities.Profile", b =>
                {
                    b.Navigation("CurrentRentals");

                    b.Navigation("CurrrentReservations");
                });

            modelBuilder.Entity("Domain.Entities.Rental", b =>
                {
                    b.Navigation("Copy");
                });

            modelBuilder.Entity("Domain.Entities.Reservation", b =>
                {
                    b.Navigation("Copy");
                });
#pragma warning restore 612, 618
        }
    }
}
